// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  firstName         String
  lastName          String
  email             String              @unique
  password          String
  tasks             Task[]
  ServiceConnection ServiceConnection[]
}

model Task {
  id          String    @id @default(cuid())
  title       String    @default("Untitled Task")
  description String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  trigger     Trigger?
  actions     Action[]
  taskRuns    TaskRun[]
  triggerId   String
  Running     Boolean   @default(false)
  LastRunedAt DateTime?
}

model App {
  id                String              @id @default(cuid())
  name              String
  image             String?
  availableTrigger  AvailableTriggers[]
  availableActions  AvailableActions[]
  ServiceConnection ServiceConnection[]
}

model Trigger {
  id       String @id @default(cuid())
  metadata Json   @default("{}")

  task   Task?  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String @unique

  availableTrigger    AvailableTriggers @relation(fields: [availableTriggersId], references: [id])
  availableTriggersId String
}

model AvailableTriggers {
  id       String    @id @default(cuid())
  name     String
  triggers Trigger[]
  App      App?      @relation(fields: [appId], references: [id])
  appId    String?
}

model Action {
  id           String @id @default(cuid())
  sortingOrder Int    @default(0)
  metadata     Json   @default("{}")

  availableAction    AvailableActions? @relation(fields: [availableActionsId], references: [id])
  availableActionsId String?

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String
}

model AvailableActions {
  id      String   @id @default(cuid())
  name    String
  actions Action[]
  App     App?     @relation(fields: [appId], references: [id])
  appId   String?
}

model ServiceConnection {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  app          App       @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId        String
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model TaskRun {
  id            String         @id @default(cuid())
  metadata      Json           @default("{}")
  taskRunOutbox TaskRunOutbox?

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String
}

model TaskRunOutbox {
  id     String @id @default(cuid())
  status Status @default(PENDING)

  taskRun   TaskRun @relation(fields: [taskRunId], references: [id], onDelete: Cascade)
  taskRunId String  @unique
}

enum Status {
  PENDING
  SUCCESS
  FAILED
}
